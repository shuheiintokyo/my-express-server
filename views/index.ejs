//views/index.ejs

<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel="stylesheet" href="/stylesheets/style.css" />
    <style>
      table {
        border-collapse: collapse;
        width: 100%;
        border: 1px solid #ccc;
        margin-top: 20px;
        margin-bottom: 40px;
      }

      th, td {
        border: 1px solid #ccc;
        padding: 8px;
        text-align: right;
      }

      th {
        background-color: #f4f4f4;
        text-align: center;
      }

      td:first-child {
        text-align: left;
      }

      caption {
        margin-bottom: 10px;
        font-weight: bold;
        font-size: 1.2em;
      }

      .uploaded-files {
        margin: 20px 0;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }

      .uploaded-files h3 {
        margin-top: 0;
        margin-bottom: 15px;
        color: #333;
        border-bottom: 2px solid #ddd;
        padding-bottom: 10px;
      }

      .file-blocks-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 15px;
      }

      .file-item {
        display: inline-block;
        padding: 12px 20px;
        background-color: white;
        border: 2px solid #ddd;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
        min-width: 120px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }

      .file-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      }

      .file-item.selected {
        background-color: #90EE90;
        border-color: #4CAF50;
        color: #2E7D32;
        font-weight: bold;
      }

      .export-button {
        padding: 12px 24px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 16px;
        transition: all 0.3s ease;
        margin-top: 20px;
      }

      .export-button:hover:not(:disabled) {
        background-color: #0056b3;
        transform: translateY(-2px);
      }

      .export-button:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
        transform: none;
      }

      .no-files-message {
        text-align: center;
        padding: 20px;
        color: #666;
        font-style: italic;
      }
      .button-group {
        display: flex;
        gap: 15px;
        margin-top: 20px;
      }

      .weight-inspection-button {
        padding: 12px 24px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 16px;
        transition: all 0.3s ease;
      }

      .weight-inspection-button:hover {
        background-color: #218838;
        transform: translateY(-2px);
      }
    </style>
    
    <script>
      // Initialize data from server
      window.initialTableData = <%- JSON.stringify(tableData) %>;
      const selected_indices = <%- JSON.stringify(selected_indices) %>;
      
      let tableData = window.initialTableData || [];
      let selectedFiles = new Set();

      console.log('Initial table data:', tableData);

      function updateUploadedFiles() {
        const uploadedFilesContainer = document.getElementById("uploaded-files");
        uploadedFilesContainer.innerHTML = '<h3>Available Files:</h3>';
        const fileBlocksContainer = document.createElement("div");
        fileBlocksContainer.className = "file-blocks-container";    
        
        if (tableData.length === 0) {
          const noFilesMessage = document.createElement("div");
          noFilesMessage.className = "no-files-message";
          noFilesMessage.textContent = "There are no available files in the resources/textdata folder";
          fileBlocksContainer.appendChild(noFilesMessage);
        } else { 
          console.log('Creating file blocks for:', tableData);
          tableData.forEach(({ fileName }) => {
              const fileItem = document.createElement("div");
              fileItem.className = `file-item ${selectedFiles.has(fileName) ? 'selected' : ''}`;
              fileItem.textContent = fileName;
              fileItem.onclick = () => toggleFileSelection(fileName);
              fileBlocksContainer.appendChild(fileItem);
          });
        }

        uploadedFilesContainer.appendChild(fileBlocksContainer);

        // Update export button state
        const exportButton = document.getElementById("export-button");
        exportButton.disabled = selectedFiles.size === 0;
          }

      function toggleFileSelection(fileName) {
        if (selectedFiles.has(fileName)) {
          selectedFiles.delete(fileName);
        } else {
          selectedFiles.add(fileName);
        }
        updateUploadedFiles();
      }

      function createTable(fileName, numericalData) {
        const table = document.createElement("table");
        const caption = document.createElement("caption");
        caption.textContent = `File: ${fileName}`;
        table.appendChild(caption);

        // Header row
        const headerRow = document.createElement("tr");
        headerRow.appendChild(createCell("File", "th"));
        numericalData.forEach((_, index) => {
          headerRow.appendChild(createCell(index + 1, "th"));
        });
        table.appendChild(headerRow);

        // Data row
        const valuesRow = document.createElement("tr");
        valuesRow.appendChild(createCell(fileName, "td"));
        numericalData.forEach((value) => {
          valuesRow.appendChild(createCell(value.toFixed(2), "td"));
        });
        table.appendChild(valuesRow);

        return table;
      }

      function createCell(content, type) {
        const cell = document.createElement(type);
        cell.textContent = content;
        return cell;
      }

      async function exportData() {
        try {
          const filteredData = tableData
            .filter(({ fileName }) => selectedFiles.has(fileName))
            .map(({ fileName, values }) => ({
              fileName,
              filteredValues: selected_indices.map(index => {
                const arrayIndex = index !== "" ? parseInt(index) - 1 : -1;
                return arrayIndex >= 0 && arrayIndex < values.length ? values[arrayIndex] : "";
              })
          }));

          const response = await fetch("/export", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              exportData: filteredData,
              tableData: JSON.stringify(tableData)
            })
          });

          if (!response.ok) {
            throw new Error('Export failed');
          }

          window.location.href = "/export";
        } catch (error) {
          console.error("Export error:", error);
          alert("Failed to export data. Please try again.");
        }
      }

      // Initialize when page loads
      document.addEventListener('DOMContentLoaded', () => {
          console.log('DOM loaded, updating files...');
          updateUploadedFiles();

          const resultsContainer = document.getElementById("results-container");
          resultsContainer.innerHTML = "";
          
          if (tableData.length > 0) {
            tableData.forEach(({ fileName, values }) => {
              resultsContainer.appendChild(createTable(fileName, values));
            });
          }
      });
    </script>
  </head>
  <body>
    <h1><%= title %></h1>
    <p>Welcome to <%= title %></p>

    <div class="uploaded-files" id="uploaded-files">
      <h3>Available Files:</h3>
      <div class="file-blocks-container"></div>
    </div>

    <div class="button-group">
      <button id="export-button" class="export-button" onclick="exportData()" disabled>Export Selected Files</button>
      <button class="weight-inspection-button" onclick="window.location.href='/weight-inspection'">Weight Inspection</button>
    </div>

    <div id="results-container"></div>
  </body>
</html>